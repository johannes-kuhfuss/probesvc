// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johannes-kuhfuss/probesvc/domain (interfaces: JobRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/johannes-kuhfuss/probesvc/domain"
	api_error "github.com/johannes-kuhfuss/services_utils/api_error"
)

// MockJobRepository is a mock of JobRepository interface.
type MockJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryMockRecorder
}

// MockJobRepositoryMockRecorder is the mock recorder for MockJobRepository.
type MockJobRepositoryMockRecorder struct {
	mock *MockJobRepository
}

// NewMockJobRepository creates a new mock instance.
func NewMockJobRepository(ctrl *gomock.Controller) *MockJobRepository {
	mock := &MockJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepository) EXPECT() *MockJobRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobRepository) Create(arg0 domain.Job) api_error.ApiErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(api_error.ApiErr)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobRepository)(nil).Create), arg0)
}

// DeleteById mocks base method.
func (m *MockJobRepository) DeleteById(arg0 string) api_error.ApiErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0)
	ret0, _ := ret[0].(api_error.ApiErr)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockJobRepositoryMockRecorder) DeleteById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockJobRepository)(nil).DeleteById), arg0)
}

// FindAll mocks base method.
func (m *MockJobRepository) FindAll(arg0 string) (*[]domain.Job, api_error.ApiErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].(*[]domain.Job)
	ret1, _ := ret[1].(api_error.ApiErr)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockJobRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockJobRepository)(nil).FindAll), arg0)
}

// FindById mocks base method.
func (m *MockJobRepository) FindById(arg0 string) (*domain.Job, api_error.ApiErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*domain.Job)
	ret1, _ := ret[1].(api_error.ApiErr)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockJobRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockJobRepository)(nil).FindById), arg0)
}

// GetNextJob mocks base method.
func (m *MockJobRepository) GetNextJob() (*domain.Job, api_error.ApiErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextJob")
	ret0, _ := ret[0].(*domain.Job)
	ret1, _ := ret[1].(api_error.ApiErr)
	return ret0, ret1
}

// GetNextJob indicates an expected call of GetNextJob.
func (mr *MockJobRepositoryMockRecorder) GetNextJob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextJob", reflect.TypeOf((*MockJobRepository)(nil).GetNextJob))
}
